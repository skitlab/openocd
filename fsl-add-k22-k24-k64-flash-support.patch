diff --git a/src/flash/nor/kinetis.c b/src/flash/nor/kinetis.c
index 396fe42..981f5af 100644
--- a/src/flash/nor/kinetis.c
+++ b/src/flash/nor/kinetis.c
@@ -92,11 +92,14 @@ static const struct {
 	unsigned pflash_sector_size_bytes;
 	unsigned nvm_sector_size_bytes;
 	unsigned num_blocks;
-} kinetis_flash_params[4] = {
+} kinetis_flash_params[7] = {
 	{ 1<<10, 1<<10, 2 },
 	{ 2<<10, 1<<10, 2 },
 	{ 2<<10, 2<<10, 2 },
-	{ 4<<10, 4<<10, 4 }
+        { 4<<10, 4<<10, 4 },
+        { 4<<10, 4<<10, 2 },
+        { 2<<10, 2<<10, 2 },
+        { 4<<10, 0, 1 }
 };
 
 /* Addressess */
@@ -108,6 +111,15 @@ static const struct {
 #define SIM_SDID	0x40048024
 #define SIM_FCFG1	0x4004804c
 #define SIM_FCFG2	0x40048050
+#define SMC_PMCTRL	0x4007E001
+#define SMC_PMSTAT	0x4007E003
+#define WDOG_STCTRLH 0x40052000
+
+/* Values */
+#define PM_STAT_RUN		0x01
+#define PM_STAT_VLPR		0x04
+#define PM_STAT_HSR		0x80
+#define PM_CTRL_RUNM_RUN	0x00
 
 /* Commands */
 #define FTFx_CMD_BLOCKSTAT  0x00
@@ -119,7 +131,10 @@ static const struct {
 #define FTFx_CMD_MASSERASE  0x44
 
 /* The Kinetis K series uses the following SDID layout :
- * Bit 31-16 : 0
+ * Bit 31-28 : FAMILYID (or 0 on older devices)
+ * Bit 27-24 : SUBFAMID (or 0 on older devices)
+ * Bit 23-20 : SERIESID (or 0 on older devices)
+ * Bit 19-16 : Reserved (0)
  * Bit 15-12 : REVID
  * Bit 11-7  : DIEID
  * Bit 6-4   : FAMID
@@ -133,13 +148,8 @@ static const struct {
  * Bit 15-12 : REVID
  * Bit 6-4   : Reserved (0)
  * Bit 3-0   : PINID
- *
- * SERIESID should be 1 for the KL-series so we assume that if
- * bits 31-16 are 0 then it's a K-series MCU.
  */
 
-#define KINETIS_SDID_K_SERIES_MASK  0x0000FFFF
-
 #define KINETIS_SDID_DIEID_MASK 0x00000F80
 #define KINETIS_SDID_DIEID_K_A	0x00000100
 #define KINETIS_SDID_DIEID_K_B	0x00000200
@@ -164,7 +174,8 @@ static const struct {
 #define KINETIS_K_SDID_K21_M50   0x00000230
 #define KINETIS_K_SDID_K21_M120	 0x00000330
 #define KINETIS_K_SDID_K22_M50   0x00000210
-#define KINETIS_K_SDID_K22_M120	 0x00000310
+#define KINETIS_K_SDID_K22_M120	 0x00000E90
+#define KINETIS_K_SDID_K24  0x00000710
 #define KINETIS_K_SDID_K30_M72   0x000000A0
 #define KINETIS_K_SDID_K30_M100  0x00000120
 #define KINETIS_K_SDID_K40_M72   0x000000B0
@@ -174,8 +185,12 @@ static const struct {
 #define KINETIS_K_SDID_K53		 0x00000170
 #define KINETIS_K_SDID_K60_M100  0x00000140
 #define KINETIS_K_SDID_K60_M150  0x000001C0
+#define KINETIS_K_SDID_K64  0x00000340
 #define KINETIS_K_SDID_K70_M150  0x000001D0
 
+#define KINETIS_K_SDID_SERIESID_MASK 0x00F00000
+#define KINETIS_K_SDID_SERIESID_KL   0x00000000
+
 #define KINETIS_KL_SDID_SERIESID_MASK 0x00F00000
 #define KINETIS_KL_SDID_SERIESID_KL   0x00100000
 
@@ -198,6 +213,43 @@ struct kinetis_flash_bank {
 	} flash_class;
 };
 
+static int allow_fcf_writes = 0;
+
+COMMAND_HANDLER(fcf_write_enable_command)
+{
+        allow_fcf_writes = 1;
+        command_print(CMD_CTX, "Arbitrary flash configuration field writes disabled");
+        LOG_WARNING("BEWARE: incorrect flash configuration may permanently lock device");
+        return ERROR_OK;
+}
+
+COMMAND_HANDLER(fcf_write_disable_command)
+{
+        allow_fcf_writes = 0;
+        command_print(CMD_CTX, "Arbitrary flash configuration field writes disabled.");
+        return ERROR_OK;
+}
+
+static const struct command_registration fcf_command_handlers[] = {
+        {
+                .name = "fcf_write_enable",
+                .handler = fcf_write_enable_command,
+                .mode = COMMAND_CONFIG,
+                .help = "Allow writing arbitrary values to the Kinetis flash configuration field (use with caution).",
+                .usage = "",
+        },
+        {
+                .name = "fcf_write_disable",
+                .handler = fcf_write_disable_command,
+                .mode = COMMAND_CONFIG,
+                .help = "Disable writing arbitrary values to the Kinetis flash configuration field."
+                "Any writes will be adjusted to use the value "
+                "0xffffffff 0xffffffff 0xffffffff 0xfffffffe."
+                "Adjustments will trigger a warning.",
+                .usage = "",
+        },
+        COMMAND_REGISTRATION_DONE
+};
 
 
 #define MDM_REG_STAT		0x00
@@ -496,6 +548,8 @@ FLASH_BANK_COMMAND_HANDLER(kinetis_flash_bank_command)
 
 	bank->driver_priv = bank_info;
 
+        register_commands(CMD_CTX, NULL, fcf_command_handlers);
+
 	return ERROR_OK;
 }
 
@@ -819,6 +873,17 @@ COMMAND_HANDLER(kinetis_securing_test)
 				      0, 0, 0, 0,  0, 0, 0, 0,  &ftfx_fstat);
 }
 
+static uint8_t kinetis_get_mode(struct flash_bank *bank)
+{
+        int result;
+        uint8_t pmstat;
+        result = target_read_u8(bank->target, SMC_PMSTAT, &pmstat);
+        if (result != ERROR_OK)
+                return result;
+        LOG_DEBUG("SMC_PMSTAT: 0x%x", pmstat);
+        return pmstat;
+}
+
 static int kinetis_erase(struct flash_bank *bank, int first, int last)
 {
 	int result, i;
@@ -852,7 +917,7 @@ static int kinetis_erase(struct flash_bank *bank, int first, int last)
 
 	if (first == 0) {
 		LOG_WARNING
-			("flash configuration field erased, please reset the device");
+			("Any changes to flash configuration field will not take effect until next reset");
 	}
 
 	return ERROR_OK;
@@ -872,12 +937,41 @@ static int kinetis_write(struct flash_bank *bank, const uint8_t *buffer,
 		return ERROR_TARGET_NOT_HALTED;
 	}
 
+        if (!allow_fcf_writes) {
+                if (offset <= 0x400 && offset + count > 0x400) {
+                        int fcf_match = 1;
+                        uint32_t requested_fcf[4] = { 
+                                *((uint32_t *) (buffer + (0x400 - offset))),
+                                *((uint32_t *) (buffer + (0x404 - offset))),
+                                *((uint32_t *) (buffer + (0x408 - offset))),
+                                *((uint32_t *) (buffer + (0x40c - offset)))
+                        };
+                        uint32_t required_fcf[4] = { 0xffffffff, 0xffffffff, 0xffffffff, 0xfffffffe };
+                        for (i = 0; i < 4; i++) {
+                                if (requested_fcf[i] != required_fcf[i]) {
+                                        fcf_match = 0;
+                                        *((uint32_t *) (buffer + (0x400 + (i * 4) - offset))) = required_fcf[i];
+                                }
+                        }
+                        if (!fcf_match) {
+                                LOG_WARNING ("Requested write to flash configuration "
+                                             "field 0x%08x 0x%08x 0x%08x 0x%08x "
+                                             "transformed to 0x%08x 0x%08x 0x%08x 0x%08x",
+                                             requested_fcf[0], requested_fcf[1], requested_fcf[2], requested_fcf[3],
+                                             required_fcf[0], required_fcf[1], required_fcf[2], required_fcf[3]);
+                        }
+                }
+        }
+
 	if (kinfo->klxx) {
 		/* fallback to longword write */
 		fallback = 1;
 		LOG_WARNING("Kinetis L Series supports Program Longword execution only.");
 		LOG_DEBUG("flash write into PFLASH @08%" PRIX32, offset);
 
+        } else if (kinfo->granularity == 5 || kinfo->granularity == 6) {
+                fallback = 1;
+                LOG_DEBUG("flash write into PFLASH @08%" PRIX32, offset);
 	} else if (kinfo->flash_class == FC_FLEX_NVM) {
 		uint8_t ftfx_fstat;
 
@@ -917,7 +1011,7 @@ static int kinetis_write(struct flash_bank *bank, const uint8_t *buffer,
 		unsigned prog_section_chunk_bytes = kinfo->sector_size >> 8;
 		/* assume the NVM sector size is half the FlexRAM size */
 		unsigned prog_size_bytes = MIN(kinfo->sector_size,
-				kinetis_flash_params[kinfo->granularity].nvm_sector_size_bytes);
+                                               kinetis_flash_params[kinfo->granularity].nvm_sector_size_bytes / ((kinfo->granularity == 4) ? 4 : 1));
 		for (i = 0; i < count; i += prog_size_bytes) {
 			uint8_t residual_buffer[16];
 			uint8_t ftfx_fstat;
@@ -990,7 +1084,8 @@ static int kinetis_write(struct flash_bank *bank, const uint8_t *buffer,
 		}
 	}
 	/* program longword command, not supported in "SF3" devices */
-	else if ((kinfo->granularity != 3) || (kinfo->klxx)) {
+	else if ((kinfo->granularity != 3 && kinfo->granularity != 4)
+                 || (kinfo->klxx)) {
 
 		if (count & 0x3) {
 			uint32_t old_count = count;
@@ -1057,11 +1152,12 @@ static int kinetis_read_part_info(struct flash_bank *bank)
 	result = target_read_u32(target, SIM_SDID, &kinfo->sim_sdid);
 	if (result != ERROR_OK)
 		return result;
+        LOG_DEBUG("SIM_SDID: 0x%x\n", kinfo->sim_sdid);
 
 	kinfo->klxx = 0;
 
 	/* K-series MCU? */
-	if ((kinfo->sim_sdid & (~KINETIS_SDID_K_SERIES_MASK)) == 0) {
+	if ((kinfo->sim_sdid & KINETIS_K_SDID_SERIESID_MASK) == KINETIS_K_SDID_SERIESID_KL) {
 		uint32_t mcu_type = kinfo->sim_sdid & KINETIS_K_SDID_TYPE_MASK;
 
 		switch (mcu_type) {
@@ -1095,12 +1191,23 @@ static int kinetis_read_part_info(struct flash_bank *bank)
 		case KINETIS_K_SDID_K10_M120:
 		case KINETIS_K_SDID_K20_M120:
 		case KINETIS_K_SDID_K21_M120:
-		case KINETIS_K_SDID_K22_M120:
 		case KINETIS_K_SDID_K60_M150:
 		case KINETIS_K_SDID_K70_M150:
 			/* 4kB sectors */
 			granularity = 3;
 			break;
+                case KINETIS_K_SDID_K22_M120:
+                        /* 2kB sectors, no program section command */
+                        granularity = 5;
+                        break;
+                case KINETIS_K_SDID_K24:
+                        /* 4kB sectors, no program section command */
+                        granularity = 6;
+                        break;
+                case KINETIS_K_SDID_K64:
+                        /* 2kB sectors, 2 banks */
+                        granularity = 4;
+                        break;
 		default:
 			LOG_ERROR("Unsupported K-family FAMID");
 			return ERROR_FLASH_OPER_UNSUPPORTED;
@@ -1141,8 +1248,10 @@ static int kinetis_read_part_info(struct flash_bank *bank)
 			nvm_size = 1 << (14 + (fcfg1_nvmsize >> 1));
 			break;
 		case 0x0f:
-			if (granularity == 3)
+			if (granularity == 3 || granularity == 4)
 				nvm_size = 512<<10;
+                        else if (granularity == 5)
+                                nvm_size = 128<<10;
 			else
 				nvm_size = 256<<10;
 			break;
@@ -1180,8 +1289,10 @@ static int kinetis_read_part_info(struct flash_bank *bank)
 		pf_size = 1 << (14 + (fcfg1_pfsize >> 1));
 		break;
 	case 0x0f:
-		if (granularity == 3)
+		if (granularity == 3 || granularity == 4)
 			pf_size = 1024<<10;
+                else if (granularity == 5)
+                        pf_size = 512<<10;
 		else if (fcfg2_pflsh)
 			pf_size = 512<<10;
 		else
